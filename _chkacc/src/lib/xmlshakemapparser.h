/************************************************************************
 *                                                                      *
 * Copyright (C) 2012 OVSM/IPGP                                         *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * (at your option) any later version.                                  *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * This program is part of 'Projet TSUAREG - INTERREG IV Caraïbes'.     *
 * It has been co-financed by the European Union and le Ministère de    *
 * l'Ecologie, du Développement Durable, des Transports et du Logement. *
 *                                                                      *
 ************************************************************************/

#ifndef __IPGP_CORE_XMLSHAKEMAPPARSER_H__
#define __IPGP_CORE_XMLSHAKEMAPPARSER_H__

#include <string>
#include <vector>

namespace IPGP {
namespace Core {


typedef std::vector<std::string> StationList;

/**
 * @package	CheckStationAcceleration
 * @brief	Polygon structure
 *
 * A polygon defines a rectangular region referenced by two couples of
 * coordinates [latMax/lonMin] and [latMin/longMax].
 */
struct Polygon {
		explicit Polygon(const float& latMax, const float& lonMin,
		                 const float& latMin, const float& lonMax) :
				latitudeMax(latMax), longitudeMin(lonMin), latitudeMin(latMin),
				longitudeMax(lonMax) {}
		Polygon() :
				latitudeMax(.0), longitudeMin(.0), latitudeMin(.0),
				longitudeMax(.0) {}
		~Polygon() {}
		float latitudeMax;
		float longitudeMin;
		float latitudeMin;
		float longitudeMax;
};
typedef std::vector<Polygon> PolygonList;


/**
 * @package	CheckStationAcceleration
 * @brief	The parser settings structure
 *
 * This structure re-groups the available features and configuration tweaks
 * supported by the XMLShakemapParser.
 */
struct XMLShakemapParserSettings {
		XMLShakemapParserSettings() :
				minStationAlert(-1), minStationAcc(.1) {}
		~XMLShakemapParserSettings() {}
		StationList stations;
		PolygonList polygons;
		int minStationAlert;
		float minStationAcc;
};
typedef XMLShakemapParserSettings ParserSettings;


/**
 * @package	CheckStationAcceleration
 * @brief	The Shakemap XML Parser
 *
 * Developed to work with Shakemap XML files generated by scwfparam (seiscomp3
 * module), this parser is able to scan and analyze data, select stations of
 * interest, deal with any actions required upon detection (SMS file writing)
 *
 * @todo Implement the component check if the need arises...
 */
class XMLShakemapParser {

	public:
		// ------------------------------------------------------------------
		//  Nested types
		// ------------------------------------------------------------------
		enum RetCode {
			OK = 0,			//! XML read, no alert raised
			ALARM = 1,		//! XML read, alert raised, should send SMS
			ERROR_0 = 2,	//! XML reading error
			ERROR_1 = 3,	//! XML error
			WARNING = 4		//! Station alert count is under min. station alert
		};

		struct Event {
				void reset() {
					id = timezone = sc3id = "", latitude = longitude = depth = magnitude = .0;
				}
				std::string id;
				std::string timezone;
				std::string sc3id;
				float latitude;
				float longitude;
				float depth;
				float magnitude;
		};

		struct Station {
				explicit Station(const std::string& c, const std::string& ins,
				                 const float& lat, const float& lon,
				                 const float& acc) :
						code(c), instType(ins), latitude(lat), longitude(lon),
						acceleration(acc) {}
				Station() :
						latitude(.0), longitude(.0), acceleration(.0) {}
				~Station() {}
				std::string code;
				std::string instType;
				float latitude;
				float longitude;
				float acceleration;
		};

	public:
		// ------------------------------------------------------------------
		//  Instruction
		// ------------------------------------------------------------------
		explicit XMLShakemapParser(const ParserSettings&,
		                           const bool& debug = false);
		~XMLShakemapParser();

	public:
		// ------------------------------------------------------------------
		//  Public interface
		// ------------------------------------------------------------------
		void processEvent(const std::string&);
		void processEventData(const std::string&);

		void setSettings(const ParserSettings& s) {
			_settings = s;
		}
		ParserSettings& settings() {
			return _settings;
		}

		//! Current parser instance message
		const std::string& message() const {
			return _message;
		}
		//! Current parser instance return code
		const int& returnCode() const {
			return _retCode;
		}

	private:
		// ------------------------------------------------------------------
		//  Private interface
		// ------------------------------------------------------------------
		//! @brief Checks if the station name isn't blacklisted
		bool stationIsBlacklisted(const std::string&);

		/**
		 * @brief Checks if a station is allowed to be processed by verifying
		 *        its position inside defined polygons.
		 * @param lat The station's latitude
		 * @param lon The station's longitude
		 * @return true|false
		 */
		bool stationIsAllowed(const float& lat, const float& lon);

		//! @brief Produces the formated SMS
		void writeMessage();
		void writeLog();

	private:
		// ------------------------------------------------------------------
		//  Members
		// ------------------------------------------------------------------
		ParserSettings _settings;
		Event _currentEvent;
		std::vector<Station> _stations;
		std::string _message;
		int _retCode;
		bool _debug;
};


} // namespace Core
} // namespace IPGP

#endif
